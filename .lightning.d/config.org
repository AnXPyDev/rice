* Load modules
#+BEGIN_SRC emacs-lisp
  (lightning-load-module "use-package")
  (lightning-load-module "lookup-fonts")
  (lightning-load-module "lmodal")
  (lightning-load-module "make-no-insert-keymap")
#+END_SRC
* User variables
#+BEGIN_SRC emacs-lisp
  (setq user-name "AnXPyDev")
#+END_SRC
* Basic config
Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
Clean up ui
#+BEGIN_SRC emacs-lisp
  (defun clean-up-ui()
    "Disables tool-bar, menu-bar and scroll-bar"
    (interactive)
    (ignore-errors (tool-bar-mode 0))
    (ignore-errors (menu-bar-mode 0))
    (ignore-errors (scroll-bar-mode 0)))
  (add-hook 'after-init-hook 'clean-up-ui)
  (clean-up-ui)
#+END_SRC
Disable auto save and backup
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
Use y-n instead of yes-no
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Treat all themes as safe
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
#+END_SRC
Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC
Default cursor
#+begin_src emacs-lisp
  (setq-default cursor-type 'hbar)
#+end_src
Default cursor blink
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src
* Packages
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config (ivy-mode 1))
#+END_SRC
** general
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t)
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC
** undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config (global-undo-tree-mode 1))
#+END_SRC
* Languages
** Lisp
Fix lisp indenting
#+BEGIN_SRC emacs-lisp
  (setq lisp-indent-offset tab-width)
#+END_SRC
* Editing functions
#+begin_src emacs-lisp

#+end_src
* Keybindings
** Leader map
#+BEGIN_SRC emacs-lisp
  (setq leader-map (make-sparse-keymap))

  (general-define-key
    :keymaps 'leader-map)
#+END_SRC
** Command map
#+BEGIN_SRC emacs-lisp
  (setq command-map (make-sparse-keymap))

  (general-define-key
    :keymaps 'command-map
    "e" 'execute-extended-command
    "f" 'find-file
    "d" 'dired
    "C-f" 'find-file
    "C-d" 'dired)
#+END_SRC
** Globals
#+BEGIN_SRC emacs-lisp
  (general-define-key
    "C-z" leader-map
    "C-e" command-map
    "M-q" 'lmodal-raise-default-mode
    "<escape>" 'keyboard-quit)
#+END_SRC
** Bare normal map
#+BEGIN_SRC emacs-lisp
  (setq modal-normal-bare-map (make-sparse-keymap))

  (general-define-key
    :keymaps 'modal-normal-bare-map
    "M-e" 'lmodal-raise-emacs-mode
    "z" leader-map
    "e" command-map
    "h" 'backward-char
    "j" 'next-line
    "k" 'previous-line
    "l" 'forward-char
    "H" 'backward-word
    "J" 'scroll-up-command
    "K" 'scroll-down-command
    "L" 'forward-word
    "," 'beginning-of-line
    "<" 'beginning-of-line-text
    "." 'end-of-line
    ">" 'end-of-line
    "@" 'universal-argument
    "u" 'undo-tree-undo
    "U" 'undo-tree-redo
    "s" 'swiper)
#+END_SRC
** Normal map
#+BEGIN_SRC emacs-lisp
  (setq modal-normal-map
    (make-composed-keymap
      (list
        (copy-keymap modal-normal-bare-map)
        (make-no-insert-keymap))))

  (general-define-key
    :keymaps 'modal-normal-map
    "i" 'lmodal-raise-insert-mode
    "I" (lambda() (interactive) (beginning-of-line) (lmodal-raise-insert-mode))
    "C-i" (lambda() (interactive) (end-of-line) (lmodal-raise-insert-mode))
    "r" 'lmodal-raise-region-mode
    "R" (lambda() (interactive) (beginning-of-line) (lmodal-raise-region-mode) (end-of-line))
    "d" 'delete-char
    "D" 'kill-whole-line
    "c" (lambda() (interactive) (kill-region (point-at-bol) (point-at-eol)) (yank))
    "C" (kbd "c")
    "v" 'yank
    "V" (lambda() (interactive) (end-of-line) (open-line) (next-line) (yank))
    )
#+END_SRC
** Normal org map
#+BEGIN_SRC emacs-lisp
  (setq modal-normal-org-map (copy-keymap modal-normal-map))

  (general-define-key
    :keymaps 'modal-normal-org-map
    "<tab>" 'org-cycle)
#+END_SRC
** Region map
#+BEGIN_SRC emacs-lisp
  (setq modal-region-map (copy-keymap modal-normal-bare-map))

  (general-define-key
    :keymaps 'modal-region-map
    "<escape>" 'lmodal-raise-default-mode
    "C-g" 'lmodal-raise-default-mode
    "M-q" 'lmodal-raise-default-mode
    "r" 'er/expand-region
    "c" (lambda() (interactive)
          (kill-region (region-beginning) (region-end))
          (yank)
          (lmodal-raise-default-mode))
    "v" (lambda() (interactive)
          (delete-region (region-beginning) (region-end))
          (yank)
          (lmodal-raise-default-mode))
    "d" (lambda() (interactive)
          (kill-region (region-beginning) (region-end))
          (lmodal-raise-default-mode))
    )
#+END_SRC
** Insert map
#+BEGIN_SRC emacs-lisp
  (setq modal-insert-map (make-sparse-keymap))

  (general-define-key
    :keymaps 'modal-insert-map
    "<escape>" 'lmodal-raise-default-mode
    "M-q" 'lmodal-raise-default-mode)
#+END_SRC
** Ivy map
#+BEGIN_SRC emacs-lisp
  (general-define-key
    :keymaps 'ivy-minibuffer-map
    "<escape>" 'minibuffer-keyboard-quit
    "C-j" 'ivy-next-line
    "C-k" 'ivy-previous-line
    "M-j" 'ivy-next-line
    "M-k" 'ivy-previous-line
    "TAB" 'ivy-partial-or-done
    "RET" 'ivy-done
    "C-RET" 'ivy-immediate-done)
#+END_SRC
* Modal
Cursors for modes
#+BEGIN_SRC emacs-lisp
  (setq modal-emacs-cursor 'box)
  (setq modal-normal-cursor 'hbar)
  (setq modal-insert-cursor 'bar)
#+END_SRC
Define modes
#+BEGIN_SRC emacs-lisp
  (lmodal-define-mode emacs
    :lighter " [E]"
    :cursor modal-emacs-cursor)

  (lmodal-define-mode normal
    :keymap modal-normal-map
    :lighter " [N]"
    :cursor modal-normal-cursor)

  (lmodal-define-mode normal-org
    :keymap modal-normal-org-map
    :lighter " [N-org]"
    :cursor modal-normal-cursor)

  (lmodal-define-mode region
    :keymap modal-region-map
    :lighter " [R]"
    :cursor modal-normal-cursor
    :on-enable (set-mark (point))
    :on-disable (pop-mark))

  (lmodal-define-mode insert
    :keymap modal-insert-map
    :lighter " [I]"
    :cursor modal-insert-cursor)
#+END_SRC
Initialize lmodal
#+BEGIN_SRC emacs-lisp
  (lmodal-set-default-mode normal)
  (lmodal-pair-major-mode org-mode normal-org)
  (lmodal-pair-major-mode dired-mode emacs)
  (lmodal-pair-major-mode eshell-mode emacs)

  (lmodal-global-mode 1)
#+END_SRC
* Appearance
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq initial-buffer-choice (lambda() (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Lightning Emacs")
    (setq dashboard-center-content t)
    (setq dashboard-startup-banner (concat lightning-config-directory "banner.png"))
    (dashboard-setup-startup-hook))

#+END_SRC
** Prettify symbols
#+BEGIN_SRC emacs-lisp
  (setq-default prettify-symbols-alist
    '(("lambda" . "Î»")))

  (global-prettify-symbols-mode t)
#+END_SRC
** Modeline
Install telephone line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :config (telephone-line-mode 1))
#+END_SRC
** Themes
#+BEGIN_SRC emacs-lisp
  (use-package arc-dark-theme)
  (use-package kaolin-themes)
#+END_SRC
** Theme for gui
#+BEGIN_SRC emacs-lisp
  (defun theme-gui()
    (set-face-attribute 'default nil
      :family (lookup-fonts "Cascadia Code" "Consolas")
      :height 110))
#+END_SRC
** Theme for tui
#+BEGIN_SRC emacs-lisp
  (defun theme-tui())
#+END_SRC
** General theme
Line numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
#+END_SRC
General theme loader
#+BEGIN_SRC emacs-lisp
  (defun theme-general())
#+END_SRC
** Initialize theme
#+BEGIN_SRC emacs-lisp
  (defun reload-theme()
    (interactive)
    (if (display-graphic-p)
      (theme-gui)
      (theme-tui))
    (theme-general))

  (defadvice load-theme (after load-theme-after activate)
    (reload-theme))

  (if (display-graphic-p)
    (load-theme 'kaolin-galaxy)
    (reload-theme))
#+END_SRC
